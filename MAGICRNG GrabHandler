local Grab = {Holder = {}}
Grab.__index = Grab

Grab.__add = function(self, tableNew) : table
	if typeof(self) ~= "table" then return end
	if typeof(tableNew) ~= "table" then return end
	for index, value in next, tableNew do
		if self[index] then return end
		self[index] = value
	end
	return self
end

local sss = game:GetService("ServerScriptService")
local plrs = game:GetService("Players")
local cs = sss.Main.CombatScripts
local tools = sss.Main.Tools

local Tools = require(sss.Main.Tools)
local AnimationLoader = require(sss.Main.AnimationLoader)
local CombatEffects = require(cs.CombatEffects)
local PartCache = require(tools.PartCache)
local Promise = require(tools.Promise)
local Trove = require(tools.Trove)
local GrabTypes = require(script.GrabTypes)
local DamageHandler = require(cs.DamageHandler)


type infoTable = {
	Anchor : boolean,
	ApplyBoth : boolean,
	GrabType : string,
	IFrames : boolean,
	NoRotate : boolean,
	OverideHyper : boolean,
	OverideIFrames : boolean,
}

--Warn messages
local effectWarn = "Ending grab due to no effects found:"
local noKeyWarn = "Key not found in metatable, please make sure to pass it"
local grabDefault = "Grab type not found, default to basic"
local invalidKeyWarning = "Grab key not found, are you sure this has a key?"

Grab.SetupMotor = function(MainChar, OtherChar) --Sets up the grab motor based on the passed characters
	local mainRoot = MainChar:FindFirstChild("HumanoidRootPart")
	local otherRoot = OtherChar:FindFirstChild("HumanoidRootPart")
	if not mainRoot or not otherRoot then warn("Roots not found on motor setup for grab") return end
	--Checks if the roots exist for each character, stops operation if not found

	local mainHumanoid = MainChar:FindFirstChildOfClass("Humanoid")
	local otherHumanoid = OtherChar:FindFirstChildOfClass("Humanoid")
	if not mainHumanoid or not otherHumanoid then warn("Humanoids not found on motor setup for grab") return end
	--Checks if the humanoids exist for each character, stops operation if not found

	local motorContainer = PartCache.GrabMotors:GetPart()
	local motor = motorContainer:FindFirstChildWhichIsA("Motor6D")
	if not motor then warn("Motor not found on grab motor create") return end
	--Gets the motor from the part cache, stops operation if its not found

	motor.Part0 = mainRoot
	motor.Part1 = otherRoot
	--Assigns the motor parts
	return motor
end

function Grab:RemoveMotor() --Called when operation ends to clean up the motors and return it to the partcache
	if self.Motor then
		self.Motor.Part0 = nil
		self.Motor.Part1 = nil
		--Unassigns the motors
		PartCache.GrabMotors:ReturnPart(self.Motor.Parent)
		--Returns to cache of parts containing motors
	end
end

function Grab:ReturnEffects() --Finds the players combat effects in the combat effects script
	local effectsTable = {}
	for name, value in next, self do
		if not string.find(name, "Char") then continue end
		--loops the metatable for objects that have Char in them, this was originally going to be a multichar grab script

		if self._ChrReferenceTable[name] --[[ During this operation it stores the char value in metatable to prevent calling function again ]] or effectsTable[name] --[[ Checks to for Deduplication ]] then continue end
			
			
		local keyCharValue = string.gsub(name, "Char", "Key")

		if not self[keyCharValue] then warn(noKeyWarn, keyCharValue) return end
		--Checks for key value in metatable, throws warning if none
		
		if not CombatEffects[self[keyCharValue]] then warn("EffectTable not found on call for key:", self[keyCharValue]) return end
		--Checks if key value from metatable exists in the combat system
		self._ChrReferenceTable[name] = value
		--Creates a reference based on the name of the character in the metatable

		effectsTable[name] = CombatEffects[self[keyCharValue]].Effects
		--Creates a reference based on character name to them in the combat system
	end

	return effectsTable
end

Grab.ValidateExistence = function(MainChar : Model, OtherChar : Model) : number
	local key = plrs:GetPlayerFromCharacter(MainChar).UserId or MainChar:GetAttribute("NPCID") :: string
	if Grab.Holder[key] then return key end 
	--Validates wether grabbed character is a player or NPC
end

Grab.CreateGrabTable = function(MainChar : Model, OtherChar : Model, MaxSlots : number) : table
	local foundKey = Grab.ValidateExistence(MainChar, OtherChar) :: number
	if foundKey and getmetatable(Grab.Holder[foundKey]) then return end
	--Checks if the grab operation is already running for the user with that key
	
	local startMeta = setmetatable({
		MainChar = MainChar;
		MainKey = Tools.GetUserId(MainChar);
		trove = Trove.new();
		Properties = {};
		EffectSaves = {};
		Listeners = {};
		TypeInfo = {};
		MaxSlots = MaxSlots or (OtherChar and 2 or 1);
		_ChrReferenceTable = {};
		_EffectTableReferences = {};
		_CancelSignals = {};
	}, Grab)
	if OtherChar then
		local CharSlot = {
			OtherChar = OtherChar;
			OtherKey = Tools.GetUserId(OtherChar);
			Motor = Grab.SetupMotor(MainChar, OtherChar);
		}
		startMeta = startMeta + CharSlot
		--Adds another character if specified, making it not a self grab
	end

	return startMeta
end

function Grab:ApplyType(info : infoTable?)
	if not info.GrabType then warn(grabDefault) return end
	for name, character in next, self._ChrReferenceTable do
		--Checks if their name has main or not to find if they are an attacker or victim
		self.TypeInfo[name] = GrabTypes.ReturnTypeInfo(info.GrabType :: string, string.find(name, "Main") :: boolean, self) :: table
		--Returns what type of grab it is
	end

	self:ExecuteTypeInfo()
end

function Grab:ExecuteTypeInfo()
	for CharName, TypeInfo in next, self.TypeInfo do
		--Based on the passed name into the grab, it will find specific characteristics and apply them to every character in the reference table
		
		Promise.try(function()
			AnimationLoader.Animate(self._ChrReferenceTable[CharName], TypeInfo.Animation, "Play")
			if TypeInfo.AnimationAdjustment then
				AnimationLoader.Animate(self._ChrReferenceTable[CharName], TypeInfo.Animation, "AdjustSpeed", AnimationLoader[self._ChrReferenceTable[CharName]][TypeInfo.Animation].Length * TypeInfo.AnimationAdjustment)
			end

			if typeof(TypeInfo.DamageTypeInfo) ~= "boolean" then
				self._CancelSignals[CharName] = TypeInfo.DamageTypeInfo.CancelSignal
				--A cancel signal that gets created for the asynchronous damage operation, called when the grab gets cancelled
			end

			self.Motor.C0 = TypeInfo.C0Offset

			self.Motor.C1 = TypeInfo.C1Offset

			if TypeInfo.DamageType then
				DamageHandler.DamageSetup(self._ChrReferenceTable["MainChar"] or self._ChrReferenceTable[CharName], {self._ChrReferenceTable[CharName]}, "Ravage", TypeInfo.DamageTypeInfo)
			end
			--If grab typeinfo says theres a damage function, it will pass it into the damage handler to apply damage to the character, this process is very asynchronous
		end)
		--Asynchronously runs applying the grab type specifications, as they can take a bit of time
	end
end

function Grab:StopTypeInfo()
	for name, signal in next, self._CancelSignals do
		if signal then signal:Invoke() end
	end
	--Cancels all damage events created from the typeinfo handler

	for CharName, TypeInfo in next, self.TypeInfo do
		if not self._ChrReferenceTable[CharName]:FindFirstChildWhichIsA("Humanoid") then return end
		if not self._ChrReferenceTable[CharName]:FindFirstChild("HumanoidRootPart") then return end

		AnimationLoader.Animate(self._ChrReferenceTable[CharName], TypeInfo.Animation, "Stop")
	end
end

function Grab:ApplyEffects(info : infoTable?)
	for _, effectTable in next, self._EffectTableReferences do
		effectTable.Grab = true
		--Applies grab to their combat effects

		if info.IFrames then
			self.EffectSaves["IFrames"] = true
			--Loads value into EffectSaves as the end operation, as the infoTable is not stored in metatable
			effectTable.IFrames = true
			--Applies IFrames to character iterated depending on if specified
		end
	end
end

function Grab:RemoveEffects()
	for _, effectTable in next, self._EffectTableReferences do
		effectTable.Grab = false
		--Disables the grab from combat effects

		if self.EffectSaves["IFrames"] then
			--Loops the effectSaves table in the metatable
			effectTable.IFrames = false
			--Disables IFrames for character iterated depending on if specified
		end
	end
end

function Grab:ChecksConditions(info : infoTable?) 
	local foundEffects = self:ReturnEffects() :: table
	--Returns the found combat effects based on the passed characters
	if not foundEffects then warn(effectWarn, foundEffects) self:GrabStop() return end
	--Grab needs combat effects to properly work, otherwise it cancels
	
	for _, effectTable in next, foundEffects do
		if effectTable.Ragdoll then return end
		if not info.OverideHyper and effectTable.HyperArmor then return end
		--If grab is not supposed to overide hyperarmor and one of the characters has hyperarmor, cancel the grab
		if not info.OverideIFrames and effectTable.IFrames then return end
		--If grab is not supposed to overide iframes and one of the characters has iframes, cancel the grab


		table.insert(self._EffectTableReferences, effectTable)
		--Inserts the effectTable into the referencer for later usage
	end

	return true
end

function Grab:ModifyProperties(info : infoTable?)
	for charName, charModel in next, self._ChrReferenceTable do
		self:EstablishListeners(charModel, info)
		--Sets up the listeners for the charModel, which can cancel the operation depending on the character state
		
		--Creates a properties table for each character, which can be unassigned later
		self.Properties[charName] = {}

		if not string.find(charName, "MainChar") then 
			charModel.Humanoid.EvaluateStateMachine = false
			self.Properties[charName]["EvaluateStateMachine"] = true
		end

		--Defers to prevent anchoring or rotation disabling before weld application
		Promise.defer(function()
			if info.Anchor then
				if not string.find(charName, "MainChar") then return end
				charModel.HumanoidRootPart.Anchored = true
				self.Properties[charName]["Anchor"] = true
				--Amchors the mainchar if specified stationary grab
			end

			if info.NoRotate then
				charModel.Humanoid.AutoRotate = false 
				self.Properties[charName]["NoRotate"] = true
				--Disables rotation for all characters if specified
			end
		end)
	end
end

function Grab:RemoveProperties()	
	for charName, charModel in next, self._ChrReferenceTable do
		if not self.Properties[charName] then continue end
		--If no setup properties, ignore the character
		
		--Asynchronously unassigns properties to allow for faster iteration
		Promise.try(function()
			if not charModel:FindFirstChildWhichIsA("Humanoid") then return end

			if self.Properties[charName]["EvaluateStateMachine"] then
				charModel.Humanoid.EvaluateStateMachine = true
			end

			if self.Properties[charName]["NoRotate"] then
				charModel.Humanoid.AutoRotate = true
			end
		end)
		--Seperated promises in the case either a humanoid or humanoidrootpart becomes displaced during the operation 

		Promise.try(function()
			if not charModel:FindFirstChild("HumanoidRootPart") then return end

			if self.Properties[charName]["Anchor"] then
				charModel.HumanoidRootPart.Anchored = false
			end

		end)

	end 
end

function Grab:EstablishListeners(Character: Model, info : infoTable?)
	local hum = Character.Humanoid :: Humanoid
	--Runs through the model allowing for multiple promises to be stored in the trove
	Promise.each({
		Character.AncestryChanged,
		Character.HumanoidRootPart.Destroying,
		Character.Humanoid.Destroying,
	}, function(connection, index)
		self.trove:AddPromise(Promise.fromEvent(connection, function(part)
			self._GrabPromise:cancel()
			--Cancels the operation, which cancels the trove halting all the promises
			return false --Gets cleaned up anyways, extra safety incase a fail occurs
		end))
	end)
end

Grab.GrabStart = function(MainChar, duration, OtherChar, info : infoTable?) --The main operation 
	--Checks if the passed info is right before starting the operation
	if not MainChar then warn("Please pass at minimum MainChar into grab function") return end
	if not duration or typeof(duration) ~= "number" then warn("Duration not properly passed") return end
	
	--Creates an info table if not passed
	if not info then info = {} end

	local grabTable = Grab.CreateGrabTable(MainChar, OtherChar)
	--Sets up the metatable
	if not grabTable then return end
	--if something fails in the creation process halts the operation, as the metatable doesn't get creatd
	if not grabTable:ChecksConditions(info) then return end
	--Stops operation if the combat effects are not found 

	Grab.Holder[grabTable.MainKey] = grabTable
	--Stores it in the module

	grabTable:ApplyEffects(info)
	grabTable:ApplyType(info)
	grabTable:ModifyProperties(info)
	--Applies the grab related operations
	grabTable._GrabPromise = Promise.delay(duration):finally(function()
		grabTable:GrabStop()
		--After a certain amount of time the grab will stop based on the passed duration
	end)
end

function Grab:GrabStop()
	--Cleans up connections
	self:RemoveMotor()
	self:RemoveProperties()
	self:RemoveEffects()
	self:StopTypeInfo()
	self.trove:Clean()
	setmetatable(self, nil)
	self = nil
	--Removes the metatable
end

return Grab
